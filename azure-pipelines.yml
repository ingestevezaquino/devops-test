# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  name: Self_Hosted_Agents

steps:
- task: UseDotNet@2
  displayName: 'Install .NET Core SDK'
  inputs:
    version: 6.x
    performMultiLevelLookup: true

- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'LocalSonarQubeConnection'
    scannerMode: 'MSBuild'
    projectKey: 'aspnetapp-test'
    projectName: 'DOTNET APP - DEVOPS TEST'
    extraProperties: |
      sonar.cs.msbuild.slnFile=$(PATH_SRC)/aspnetapp.sln
      sonar.login=$(SONARQUBE_TOKEN)

- task: DotNetCoreCLI@2
  displayName: 'dotnet build for sonar'
  inputs:
    workingDirectory: $(PATH_SRC)

- task: SonarQubeAnalyze@5

- task: SonarQubePublish@5
  inputs:
    pollingTimeoutSec: '300'

- task: DotNetCoreCLI@2
  displayName: 'dotnet build'
  inputs:
    workingDirectory: $(PATH_SRC)

- script: |
    #!/bin/bash
    # Definir la variable ANALYSIS_ID, consultando el ID del ultimo analisis realizado para el project key: $(PROJECT_KEY)
    ANALYSIS_ID=$(curl -s -u $(SONARQUBE_TOKEN): "$(SONARQUBE_SERVER)/api/project_analyses/search?project=$(PROJECT_KEY)&format=JSON" | jq -r '.analyses[0].key')

    # Consultar el estado del quality gate para el ultimo analisis realizado
    quality_gate_status=$(curl -s -u $(SONARQUBE_TOKEN): "$(SONARQUBE_SERVER)/api/qualitygates/project_status?analysisId=$ANALYSIS_ID")

    # Imprimir en pantalla la consula y respuesta del quality gate
    echo "curl -s -u $(SONARQUBE_TOKEN): '$(SONARQUBE_SERVER)/api/qualitygates/project_status?analysisId=$ANALYSIS_ID'"
    echo "$quality_gate_status"

    # Verificar si el Quality Gate ha pasado
    if [[ $(echo "$quality_gate_status" | jq -r '.projectStatus.status') == "OK" ]]; then
      echo "El Quality Gate ha pasado."
    else
      echo "El Quality Gate no ha pasado. Lanzando una excepci√≥n..."
      exit 1
    fi
  displayName: 'Check Quality Gate Status'